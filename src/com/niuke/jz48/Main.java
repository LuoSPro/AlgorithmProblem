package com.niuke.jz48;

/**
 * 题目描述
 * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 * 示例1
 * 输入
 * 复制
 * 1,2
 * 返回值
 * 复制
 * 3
 *
 */
public class Main {

    public static void main(String[] args) {
        int num1 = 6;
        int num2  = 4;
        System.out.println(new Main().Add(num1, num2));
    }

    /**
     * 题解：
     * 1.解题思路
     * 使用位运算实现加法
     *
     * 1、一位加法
     * 普通加法	异或
     * 1 + 1 = 0	1 ^ 1 = 0(错误)
     * 1 + 0 = 1	1 ^ 0 = 1(正确)
     * 0 + 1 = 1	0 ^ 1 = 1(正确)
     * 0 + 0 = 0	0 ^ 0 = 0(正确)
     * 问题：没有采取进位操作导致运算错误
     *
     * 难点：如何解决进位问题？
     *
     * 与运算
     * 1 & 1 = 1(进位)
     * 1 & 0 = 0(不进位)
     * 0 & 1 = 0(不进位)
     * 0 & 0 = 0(不进位)
     * 在位运算中，我们用“<<”表示向左移动一位，也就是“进位”。那么我们就可以得到如下的表达式:
     *
     * ( x & y ) << 1
     * 拥有了两个基本表达式：
     *
     * 执行加法 x ^ y
     * 进位操作 ( x & y ) << 1
     *
     * @param num1
     * @param num2
     * @return
     */
    public int Add(int num1,int num2) {
        while (num2 != 0 ){
            //与运算，如果你有进位，c != 0
            int c = (num1 & num2) << 1;
            //异或运算，相当于把两个数相加了，但是没有进位
            num1 ^= num2;
            //把是否有进位的结果c 和 num1,num2异或的结果  再做一遍运算
            num2 = c;
        }
        return num1;
    }
}
